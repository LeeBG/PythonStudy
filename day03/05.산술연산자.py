# 산술연산자
# 주 목적은 수학적인 연산

# - ex)A물건은 5개 있다. B물건은 6개 있다. 총 수량은 11개다.
# 1) 바로 쓰는 이유 : 변수를 늘리기 싫다.
# 2) 코드가 길어지면서 변수가 많아지면 개발하는 입장에서 알아보기 힘들어진다.
countA = 5 #정수값은 수량에 적절하다.
countB = 6
print("전체 수량:", countA+countB,"개")
print("수량차이:",countB-countA,"개")

# 2) 변수에 저장하는 이유
# - 1. 연산에 사용된 값이 바뀔 수 있음
#       -> 변수에 저장된 값은 유지되지 않는다.
#       -> 변수는 자료를 저장 + 변화를 기록
# - 2. 같은 연산이 여러번 이루어진다.
#       -> 효율성 문제
resultA = countA * 5
resultB = countB / 4
print("수량이 5배 증가했습니다.",resultA)
print("4명에게 똑같이 나눠줌.",resultB)
countA = 6

print("결과1 :",countA*5) # countA의 값이 바뀌었기 때문에
print("결과2 :",resultA)  # 이전countA의 값으로 연산되어 저장된 결과2

# 주의사항 : 나눗셈과 실수값을 조심해라
# - 나눗셈 : 무조건 실수 결과물 
print("나눗셈1 :",countB/3) # 나누어 떨어진다는 결과는 나오지 않는다.
# - 실수값 : 섞여있으면 실수 결과물이고, 실수값은 수량으러 이용하지 않는다.
print("곱셈1 :",3.5*countB) # 자동으로 실수 결과물로 타입캐스팅된다.
# - 수치 연산결과로 실수값은 적절하지만, 수량은 맞지 않다.
print("나눗셈2 :",countB/4)

# 몫/나머지를 이용해 결과를 바꾼다.
print("2명에게 나눠줄 경우 :",countA /2)
print("2명에게 나눠줄 경우 몫:",countA //2) # 정수형
print("2명에게 나눠줄 경우 나머지:",countA %4) # 정수형

# 거듭제곱은 변수를 덜 적게 해준다.
# - 예를 들어서 표준 몸무게 : 키 * 키 * 22 / 10000
height = 176
print("표준몸무게 :",height*height*22/10000)# 거듭 제곱 사용X
print("표준몸무게 :",height**2*22/10000) # 거듭 제곱 사용

# 연산 우선 순위 ** > (*, /) > (//, %) > (+, -)
# 연산 우선 순위를 무시하고 싶다면 소괄호로 묶어주면 우선이다.
print("평균 수량 :",(countA + countB) / 2)
print(countA)
print(countB)


